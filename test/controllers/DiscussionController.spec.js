/**
 * Tests for DiscussionController
 */
/*jslint vars: true, plusplus: true, devel: true, browser: true, nomen: true, maxerr: 50 */
/*global define: false, $: false, _: false, Backbone: false, describe: false, assert: false, it: false, beforeEach: false, before: false, after: false, sails: false */
(function() {
  'use strict';

  var request = require('supertest'),
  		should = require('should'),
      chance = require('chance').Chance();

  describe('DiscussionController Tests', function(done) {
    var testUser, testDiscipline, testDiscussion;

  	testUser = {
      'username': 'bobbie.brown@example.edu',
      'email': 'bobbie.brown@example.edu',
      'firstName': 'Bobbie',
      'lastName': 'Brown',
      'password': '2952fpij-023',
      'role': 'user',
    };

    testDiscipline = {
      name: 'intellectual history'
    };

    var testSource = generateSource(true, true, true, true, true, false);

    before(function() {
      return Promise
        .all([User.destroy(), Source.destroy(), Discipline.destroy(), Discussion.destroy()])
        .then(function () {

          return Discipline.create(testDiscipline)
            .then(function(result) {
              return result;
            })
            .catch(function(err) { throw err; });

        })
        .then(function(discipline) {

          testUser.discipline = discipline.id;

          return User.create(testUser)
            .then(function(result) {
              testUser = result;
              return result;
            })
            .catch(function(err) { throw err; });

        })
        .then(function() {

          return Source.create(testSource)
            .then(function(result) {
              testSource = result;
              return result;
            }).catch(function(err) { throw err; });

        }).catch(function(err) {
          console.log('Error creating fake data for recommendation tests: ', err);
        });
    });

    after(function() {
      return Promise.all([User.destroy(), Source.destroy(), Discipline.destroy(), Recommendation.destroy()]);
    });

    describe('try to create a discussion without an owner', function() {
      it('should return 400', function(done) {
        request(sails.hooks.http.app)
          .post('/discussions')
          .send(testDiscussion)
          .expect(400,done);
      });
    });

    describe('try to create a discussion with one owner', function() {

      it('should return 200', function(done) {
        request(sails.hooks.http.app)
          .post('/discussions')
          .send(generateDiscussion(true, true, testUser.id, false, false))
          .expect(200,done);
      });

    });

    describe('try to create a discussion with source in db', function() {

      it('should return 200', function(done) {
        request(sails.hooks.http.app)
          .post('/discussions')
          .send(generateDiscussion(true, true, testUser.id, false, [testSource]))
          .expect(200)
          .end(function(err,res) {
            if (err) return done(err);
            done();
          })
      });

    });

    describe('try to create a discussion with source from web', function() {
      var testSource2 = generateSource(true,true,true,true,true,true);
      it('should return 200', function(done) {
        request(sails.hooks.http.app)
          .post('/discussions')
          .send(generateDiscussion(true, true, testUser.id, false, [testSource, testSource2]))
          .expect(200)
          .end(function(err,res) {
            if (err) return done(err);
            console.log({discussion:res.body});
            done();
          })
      });
    });

  });

  function generateDiscussion(hasTitle, hasPrompt, hasOwner, hasMembers, hasSources, isPrivate, isVisible) {
     var discussion = {};

    if (hasTitle) discussion.title = typeof hasTitle === 'string' ? hasTitle : chance.sentence({words: 4});
    if (hasPrompt) discussion.prompt = typeof hasPrompt === 'string' ? hasPrompt : chance.sentence({words:10});
    if (hasOwner) discussion.owner = hasOwner; // This can't be autogenerated
    if (hasMembers) discussion.members = hasMembers; // Also can't be autogenerated
    if (hasSources) discussion.sources = hasSources; // Again, can't be autogenerated
    discussion.isPrivate = isPrivate !== undefined ? isPrivate : true;
    discussion.isVisible = isVisible !== undefined ? isVisible : false;
    
    return discussion;
  }

  function generateSource(hasType, hasIdentifiers, hasTitle, hasAuthors, hasYear, isWebSource) {
    var source;

    source = {};

    if (hasType) source.type = typeof hasType === 'string' ? hasType : 'book';
    if (hasIdentifiers) source.identifiers = typeof hasIdentifiers === 'array' ? hasIdentifiers : [ {type: 'ISBN_13', identifier: '9780571310302'} ];
    if (hasTitle) source.title = typeof hasTitle === 'string' ? hasTitle : chance.sentence({words: 3});
    if (hasAuthors) source.authors = typeof hasAuthors === 'object' ? hasAuthors : [{ firstName: chance.first(), lastName: chance.last() }];
    if (hasYear) source.year = typeof hasYear === 'int' ? hasYear : chance.year();
    if (isWebSource) source.websource = typeof isWebSource === 'string' ? isWebSource : 'google_books';

    return source;
  }

}());



